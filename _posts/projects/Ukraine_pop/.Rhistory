library(sf)
library(tidyverse)
library(stars)
library(raster)
library(MetBrewer)
library(colorspace)
library(rayshader)
data <- st_read("C:/Users/nymos/stephenstirling.github.io/_posts/projects/Ukraine_pop/kontur_population_UA_20220630.gpkg")
ukr<-getData('GADM', country='UKR', level=0) |>
st_as_sf() |>
st_transform(crs = st_crs(data))
ukr |>
ggplot() +
geom_sf()
st_ukr <- st_intersection(data, ukr)
bb <- st_bbox(data)
bottom_left <- st_point(c(bb[["xmin"]], bb[["ymin"]])) |>
st_sfc(crs = st_crs(data))
bottom_right <- st_point(c(bb[["xmax"]], bb[["ymin"]])) |>
st_sfc(crs = st_crs(data))
data |>
ggplot() +
geom_sf() +
geom_sf(data = bottom_left)
width <- st_distance(bottom_left, bottom_right)
top_left <- st_point(c(bb[["xmin"]], bb[["ymax"]])) |>
st_sfc(crs = st_crs(data))
height <- st_distance(bottom_left, top_left)
if (width > height) {
w_ratio <- 1
h_ratio <- height / width
} else {
h_ratio <- 1
w_ratio <- width / height
}
size <- 2000
ukr_rast <- st_rasterize(data,
nx = floor(size * w_ratio),
ny = floor(size * h_ratio))
mat <- matrix(ukr_rast$population,
nrow = floor(size * w_ratio),
ncol = floor(size * h_ratio))
c1 <- met.brewer("Cassatt1")
swatchplot(c1)
texture <- grDevices::colorRampPalette(c1)(256)
swatchplot(texture)
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -20, phi = 45, zoom = .8)
render_highquality(
filename = "images/test_plot.png",
interactive = FALSE,
lightdirection = 280,
lightaltitude = c(20, 80),
lightcolor = c(c1[2], "white"),
lightintensity = c(600, 100)
)
install.packages("rayrender")
library(rayrender)
render_highquality(
filename = "images/test_plot.png",
interactive = FALSE,
lightdirection = 280,
lightaltitude = c(20, 80),
lightcolor = c(c1[2], "white"),
lightintensity = c(600, 100)
)
rgl::rgl.close()
render_camera(theta = -20, phi = 45, zoom = .8)
render_highquality(
filename = "images/test_plot.png",
interactive = FALSE,
lightdirection = 280,
lightaltitude = c(20, 80),
lightcolor = c(c1[2], "white"),
lightintensity = c(600, 100),
samples = 250,
width = 3000,
height = 3000
)
size <- 2000
ukr_rast <- st_rasterize(data,
nx = floor(size * w_ratio),
ny = floor(size * h_ratio))
mat <- matrix(ukr_rast$population,
nrow = floor(size * w_ratio),
ncol = floor(size * h_ratio))
c1 <- met.brewer("Cassatt1")
swatchplot(c1)
texture <- grDevices::colorRampPalette(c1)(256)
swatchplot(texture)
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -20, phi = 45, zoom = .8)
render_highquality(
filename = "images/test_plot.png",
interactive = FALSE,
lightdirection = 280,
lightaltitude = c(20, 80),
lightcolor = c(c1[2], "white"),
lightintensity = c(600, 100),
samples = 250,
width = 3000,
height = 3000
)
setwd("~/")
setwd("~/")
getwd()
setwd("C:\Users\nymos\stephenstirling.github.io\_posts\projects\Ukraine_pop")
setwd("C:/Users/nymos/stephenstirling.github.io/_posts/projects/Ukraine_pop")
setwd("C:/Users/nymos/stephenstirling.github.io/_posts/projects/Ukraine_pop")
outfile <- "images/final_plot.png"
{
start_time <- Sys.time()
cat(crayon::cyan(start_time), "\n")
if (!file.exists(outfile)){
png::writePNG(matrix(1), target = outfile)
}
render_highquality(
filename = "images/test_plot.png",
interactive = FALSE,
lightdirection = 280,
lightaltitude = c(20, 80),
lightcolor = c(c1[2], "white"),
lightintensity = c(600, 100),
samples = 250,
width = 3000,
height = 3000
)
end_time <- Sys.time()
diff <- end_time - start_time
cat(crayon::cyan(diff), "\n")
}
size <- 2000
ukr_rast <- st_rasterize(data,
nx = floor(size * w_ratio),
ny = floor(size * h_ratio))
mat <- matrix(ukr_rast$population,
nrow = floor(size * w_ratio),
ncol = floor(size * h_ratio))
c1 <- met.brewer("Cassatt1")
swatchplot(c1)
texture <- grDevices::colorRampPalette(c1)(256)
swatchplot(texture)
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -20, phi = 45, zoom = .8)
outfile <- "images/final_plot.png"
{
start_time <- Sys.time()
cat(crayon::cyan(start_time), "\n")
if (!file.exists(outfile)){
png::writePNG(matrix(1), target = outfile)
}
render_highquality(
filename = "images/test_plot.png",
interactive = FALSE,
lightdirection = 280,
lightaltitude = c(20, 80),
lightcolor = c(c1[2], "white"),
lightintensity = c(600, 100),
samples = 250,
width = 3000,
height = 3000
)
end_time <- Sys.time()
diff <- end_time - start_time
cat(crayon::cyan(diff), "\n")
}
{
start_time <- Sys.time()
cat(crayon::cyan(start_time), "\n")
if (!file.exists(outfile)) {
png::writePNG(matrix(1), target = outfile)
}
render_highquality(
filename = outfile,
interactive = FALSE,
lightdirection = 280,
lightaltitude = c(20, 80),
lightcolor = c(c1[2], "white"),
lightintensity = c(600, 100),
samples = 450,
width = 6000,
height = 6000
)
end_time <- Sys.time()
diff <- end_time - start_time
cat(crayon::cyan(diff), "\n")
}
library(sf)
library(tidyverse)
library(stars)
library(raster)
library(MetBrewer)
library(colorspace)
library(rayshader)
data <- st_read("C:/Users/nymos/stephenstirling.github.io/_posts/projects/Ukraine_pop/kontur_population_UA_20220630.gpkg")
ukr<-getData('GADM', country='UKR', level=0) |>
st_as_sf() |>
st_transform(crs = st_crs(data))
ukr |>
ggplot() +
geom_sf()
st_ukr <- st_intersection(data, ukr)
bb <- st_bbox(data)
bottom_left <- st_point(c(bb[["xmin"]], bb[["ymin"]])) |>
st_sfc(crs = st_crs(data))
bottom_right <- st_point(c(bb[["xmax"]], bb[["ymin"]])) |>
st_sfc(crs = st_crs(data))
data |>
ggplot() +
geom_sf() +
geom_sf(data = bottom_left) +
geom_sf(data = bottom_right, color = "red")
width <- st_distance(bottom_left, bottom_right)
top_left <- st_point(c(bb[["xmin"]], bb[["ymax"]])) |>
st_sfc(crs = st_crs(data))
height <- st_distance(bottom_left, top_left)
if (width > height) {
w_ratio <- 1
h_ratio <- height / width
} else {
h_ratio <- 1
w_ratio <- width / height
}
size <- 2000
ukr_rast <- st_rasterize(data,
nx = floor(size * w_ratio),
ny = floor(size * h_ratio))
View(ukr_rast)
View(ukr_rast)
View(ukr_rast)
mat <- matrix(ukr_rast$population,
nrow = floor(size * w_ratio),
ncol = floor(size * h_ratio))
devtools::install_github("tylermorganwall/rayrender")
install.packages("devtools")
devtools::install_github("tylermorganwall/rayrender")
devtools::install_github("tylermorganwall/rayrender")
devtools::install_github("tylermorganwall/rayshader")
library(rayrender)
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -20, phi = 45, zoom = .8)
outfile <- "images/final_plot.png"
rgl::rgl.close()
c1 <- met.brewer("Redon")
swatchplot(c1)
c1 <- met.brewer("OKeeffe1")
swatchplot(c1)
texture <- grDevices::colorRampPalette(c1, bias = 2)(256)
swatchplot(texture)
texture <- grDevices::colorRampPalette(c1, bias = 4)(256)
swatchplot(texture)
texture <- grDevices::colorRampPalette(c1, bias = 3)(256)
swatchplot(texture)
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
c1 <- met.brewer("Homer1")
swatchplot(c1)
texture <- grDevices::colorRampPalette(c1, bias = 3)(256)
swatchplot(texture)
texture <- grDevices::colorRampPalette(c1, bias = 1.5)(256)
swatchplot(texture)
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
texture <- grDevices::colorRampPalette(c1)(256)
swatchplot(texture)
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
rgl::rgl.close()
c1 <- met.brewer("VanGogh3")
swatchplot(c1)
texture <- grDevices::colorRampPalette(c1)(256)
swatchplot(texture)
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
texture <- grDevices::colorRampPalette(c1, bias = 2)(256)
swatchplot(texture)
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -20, phi = 45, zoom = .8)
outfile <- "images/final_plot.png"
render_highquality(
filename = outfile
)
devtools::install_github("tylermorganwall/rayshader")
devtools::install_github("tylermorganwall/rayrender")
library(sf)
library(tidyverse)
library(stars)
library(raster)
library(MetBrewer)
library(colorspace)
library(rayshader)
library(rayimage)
library(rayrender)
devtools::install_github("tylermorganwall/rayshader")
library(sf)
library(tidyverse)
library(stars)
library(raster)
library(MetBrewer)
library(colorspace)
library(rayshader)
